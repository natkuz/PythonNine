# üìå–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–∞–¥–∞—á.
# üìå–§—É–Ω–∫—Ü–∏—é —É–≥–∞–¥–∞–π–∫—É –∑–∞–¥–µ–∫–æ—Ä–∏—Ä—É–π—Ç–µ:
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞–º–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –∏
# ‚óã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞.
# üìå–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.

# –î–æ—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø—Ä–æ—à–ª—É—é –∑–∞–¥–∞—á—É –¥–æ–±–∞–≤–∏–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä wraps –≤
# –∫–∞–∂–¥—ã–π –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤.


import json
import os
import random
from typing import Callable
from functools import wraps
from time import time


def json_safe(func: Callable):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç json —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫–ª—é—á–∞"""
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        if not os.path.exists(f'result.json'):
            print(result)
            with open(f'result.json', 'w', encoding='utf-8') as f:
                json.dump({time(): result}, f, indent=4, ensure_ascii=False)

        else:
            with open(f'result.json', 'r', encoding='utf-8') as f_read:
                json_data = json.load(f_read)
                print(json_data)
            with open(f'result.json', 'w', encoding='utf-8') as f_write:
                json_data[time()] = result
                json.dump(json_data, f_write, indent=4, ensure_ascii=False)

        return result

    return wrapper


def decor(loop: int):
    """–§—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–¥–∏–º –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä–µ"""
    def inner(func):
        result = []
        @wraps(func)
        def wrapper(*args, **kwargs):
            for _ in range(loop):
                result.append(func(*args, **kwargs))
            return result

        return wrapper

    return inner


def check_nums(func: Callable):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —á–∏—Å–µ–ª"""
    @wraps(func)
    def wrapper(l_lim: int, h_lim: int, tries_: int):
        if l_lim > h_lim or l_lim < 0 or h_lim > 100:
            l_lim = 1
            h_lim = 100
        if tries_ not in range(1, 11):
            tries_ = random.randint(1, 10)

        result = func(l_lim, h_lim, tries_)
        return result

    return wrapper


@decor(3)
@json_safe
@check_nums
def guess_number(low: int = 10, high: int = 100, tries: int = 10) -> str:
    """–ò–≥—Ä–∞ —É–≥–∞–¥–∞–π–∫–∞"""
    count = 1
    number = random.randint(low, high)
    while count <= tries:
        my_num = int(input(f'{count} –∏–∑ {tries} –ø–æ–ø—ã—Ç–∫–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç {low} –¥–æ {high}: '))
        if my_num > number:
            print('–Ø –∑–∞–≥–∞–¥–∞–ª –º–µ–Ω—å—à–µ')
        elif my_num < number:
            print('–Ø –∑–∞–≥–∞–¥–∞–ª –±–æ–ª—å—à–µ')
        else:
            result = f'–î–∞ —Ç—ã –ø–æ–±–µ–¥–∏–ª c {count} –ø–æ–ø—ã—Ç–∫–∏, —è –∑–∞–≥–∞–¥–∞–ª {number}'
            break
        count += 1
    else:
        result = f'–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –ø—Ä–æ–∏–≥—Ä–∞–ª, –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –Ø –∑–∞–≥–∞–¥–∞–ª {number}'
    print(result)
    return result


# guess_number(-1, 1000, 15)
print(guess_number.__name__)
print(help(guess_number))
print(check_nums.__name__)
print(help(check_nums))
print(decor.__name__)
print(help(decor))
print(json_safe.__name__)
print(help(json_safe))